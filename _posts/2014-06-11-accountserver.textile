---
layout: post
title: "AccountServer"
description: "AccountServer"
category: Eudemons_Server
tags: [AccountServer]
---
{% include JB/setup %}

h2. 账号服务器设计

***

h3. 需求分析

***

h4. 基本需求

# 服务器列表的下发
# 账号数据的查询与验证
# 第三方账号验证

h4. 扩展需求
# 激活码
# -登录排队-
# VIP（充值？）
# 账户防沉迷

h3. 框架设计

***

*架构选择*

账服-AS 游服-GS 数据库-DB
# GS:AS:DB = 

*网络IO*
# -异步SELECT-
 ## -公司现有ServerSocket-
# IOCP
 ## -libevent-
 ## -acelite-
 ## *libuv*

*线程划分*
# 连接线程
# 逻辑线程

*日志工具*
# log4cpp

*内存数据库*
# "SQLite":http://www.it168.com/redian/imdb2012/
# redis
# memcached
# mysql

h2. SQL

***

pre. 
	CREATE TABLE `cq_server_list` (
		`id` INT(4) UNSIGNED NOT NULL AUTO_INCREMENT,				#序列号
		`section_id` INT(4) UNSIGNED NOT NULL DEFAULT '0',			#大区编号（对应哪一台账服物理机，和账服AccountConfig.ini里section_id对应）
		`name` VARCHAR(20) NOT NULL DEFAULT '',						#给玩家看的游服名
		`real_name` VARCHAR(20) NOT NULL DEFAULT '',				#真实游服名
		`domain_name` VARCHAR(64) NOT NULL DEFAULT '',				#游服域名地址
		`server_index` INT(4) UNSIGNED NOT NULL DEFAULT '0',		#游服index，充值用，要和游服配置一致
		`mask` INT(4) UNSIGNED NOT NULL DEFAULT '0',				#游服的mask
		`subsection` INT(4) UNSIGNED NOT NULL DEFAULT '0',			#逻辑子分区
		`order` INT(4) UNSIGNED NOT NULL DEFAULT '0',				#下发的排列顺序
        PRIMARY KEY (`id`),
		INDEX(`section_id`)
    ) TYPE=MyISAM;
	
pre. 
	CREATE TABLE `cq_config` (
		`id` INT(4) UNSIGNED NOT NULL AUTO_INCREMENT,				#序列号
		`type` INT(4) UNSIGNED NOT NULL DEFAULT '0',				#类型
		`data1` INT(4) UNSIGNED NOT NULL DEFAULT '0',				
		`data2` INT(4) UNSIGNED NOT NULL DEFAULT '0',				
		`data3` INT(4) UNSIGNED NOT NULL DEFAULT '0',				
		`data4` INT(4) UNSIGNED NOT NULL DEFAULT '0',				
		`data5` INT(4) UNSIGNED NOT NULL DEFAULT '0',				
		`str` VARCHAR(255) NOT NULL DEFAULT '',						
		`desc` VARCHAR(255) NOT NULL DEFAULT '',						
        PRIMARY KEY (`id`)
    ) TYPE=MyISAM;
	
pre. 
	CREATE TABLE `fee` (
		`id` INT(4) UNSIGNED NOT NULL AUTO_INCREMENT,				#序列号
		`server_name` VARCHAR(20) NOT NULL DEFAULT '',				#区服名称
		`user_name` VARCHAR(32) NOT NULL DEFAULT '',				#账号名称
		`user_id` INT(4) UNSIGNED NOT NULL DEFAULT '0',			#账号ID
		`ip_addr` VARCHAR(32) NOT NULL DEFAULT '',					#IP地址
		`time_stamp` VARCHAR(32) NOT NULL DEFAULT '',				#入库时间
		`start_time` VARCHAR(32) NOT NULL DEFAULT '',				#登入时间
		`end_time` VARCHAR(32) NOT NULL DEFAULT '',				#登出时间
		`machine_code` VARCHAR(20) NOT NULL DEFAULT '',			#MAC地址
		PRIMARY KEY (`id`)
	) TYPE=MyISAM CHARSET=utf8;
	
pre. 
	CREATE TABLE `cq_activation_code_type` (
		`id` INT(4) UNSIGNED NOT NULL AUTO_INCREMENT,				#序列号
		`public` TINYINT UNSIGNED NOT NULL DEFAULT '0',			#泛用型激活码 0-该激活码只能用一次 1-该激活码每个账号可用一次
		`channel` INT(4) UNSIGNED NOT NULL,							#渠道类型
		`channel_name` VARCHAR(32) NOT NULL DEFAULT '',			#渠道名称
		`use_limit` INT(4) UNSIGNED NOT NULL DEFAULT '0',			#使用次数限制
		`expire_date` INT(4) UNSIGNED NOT NULL DEFAULT '0',		#过期日期YYMMDDHHMM
		`itemtype` INT(4) UNSIGNED NOT NULL DEFAULT '0',			#礼包类型ID
		PRIMARY KEY (`id`)
	) TYPE=MyISAM;
	
	CREATE TABLE `cq_activation_code` (
		`id` INT(4) UNSIGNED NOT NULL AUTO_INCREMENT,				#序列号
		`serial_number` VARCHAR(18) NOT NULL DEFAULT '',			#激活码的字符串(必须唯一)
		`type` INT(4) UNSIGNED NOT NULL DEFAULT '0',				#激活码类型ID
		`account_id` INT(4) UNSIGNED NOT NULL DEFAULT '0',			#账号ID
		`user_id` INT(4) UNSIGNED NOT NULL DEFAULT '0',			#玩家ID
		`server_index` INT(4) UNSIGNED NOT NULL DEFAULT '0',		#游服ID
		`server_name` VARCHAR(20) NOT NULL DEFAULT '',				#游服名
		`section_id` INT(4) UNSIGNED NOT NULL DEFAULT '0',			#大区编号
		`award_time` INT(4) UNSIGNED NOT NULL DEFAULT '0',			#兑换时间YYMMDDHHMM
		PRIMARY KEY (`id`),
		INDEX(`serial_number`),
		INDEX(`account_id`),
		INDEX(`server_index`),
		INDEX(`award_time`),
		INDEX(`section_id`)
	) TYPE=MyISAM;
	
pre. 
	CREATE TABLE `cq_gm_opt` (
		`id` INT(4) UNSIGNED NOT NULL AUTO_INCREMENT,				#序列号
		`type` INT(4) UNSIGNED NOT NULL DEFAULT '0',				#操作类型 0-解封 1-封号 2-踢人
		`param` INT(4) UNSIGNED NOT NULL DEFAULT '0',				#（游戏内）账号ID
		`data` INT(4) UNSIGNED NOT NULL DEFAULT '0',				#参数
		`desc` VARCHAR(32) NOT NULL DEFAULT '',						#描述（如封号原因等）
        PRIMARY KEY (`id`)
    ) TYPE=MyISAM;
	
pre. 
	ALTER TABLE `cq_card` ADD COLUMN `account_systemtype` INT(4) UNSIGNED NOT NULL DEFAULT '0' AFTER `producer_order`;
	
pre. 
	ALTER TABLE `cq_channel_type` ADD COLUMN `app_id` INT(4) UNSIGNED NOT NULL DEFAULT '0' AFTER `system_type`;
	DELETE FROM `cq_channel_type` WHERE id=1014;
	INSERT INTO `cq_channel_type` VALUES(1014, 'ND', 30172, 109810);
	INSERT INTO `cq_channel_type` VALUES(1001, '91', 30233, 115851);
	INSERT INTO `cq_channel_type` VALUES(1013, '百度', 30236, 3863960);
	INSERT INTO `cq_channel_type` VALUES(1003, '应用宝', 30235, 1102961626);
	INSERT INTO `cq_channel_type` VALUES(1004, 'UC', 30234, 537599);
	ALTER TABLE `cq_channel_type` DROP COLUMN `app_id`;
	DELETE FROM `cq_channel_type`;
	INSERT INTO `cq_channel_type` VALUES(1014, 'ND', 30172);
	INSERT INTO `cq_channel_type` VALUES(1001, '91', 30233);
	INSERT INTO `cq_channel_type` VALUES(1013, '百度', 30236);
	INSERT INTO `cq_channel_type` VALUES(1003, '应用宝', 30235);
	INSERT INTO `cq_channel_type` VALUES(1004, 'UC', 30234);
	INSERT INTO `cq_channel_type` VALUES(1009, '小米', 30251);
	
pre. 
	CREATE TABLE `cq_db_config` (
		`id` INT(4) UNSIGNED NOT NULL AUTO_INCREMENT,				#序列号
		`channel_id` INT(4) UNSIGNED NOT NULL DEFAULT '0',			#渠道ID，e.g.1014
		`index` INT(4) UNSIGNED NOT NULL DEFAULT '0',				#该渠道第几个库			
		`db_ip` VARCHAR(32) NOT NULL DEFAULT '',					#渠道数据库的IP地址
		`db_user` VARCHAR(32) NOT NULL DEFAULT '',					#渠道数据库的用户名
		`db_pw` VARCHAR(32) NOT NULL DEFAULT '',					#渠道数据库的密码
		`db_db` VARCHAR(32) NOT NULL DEFAULT '',					#渠道数据库的数据库名
		PRIMARY KEY (`id`)
	) TYPE=MyISAM;
	
pre. 
	ALTER TABLE `cq_account` ADD COLUMN `disable_flag` INT(4) UNSIGNED NOT NULL DEFAULT '0' AFTER `activated`;
	
h2. 开发日志

***

h3. 2014-6-18

* 定基本架构：
 ** 最初的设想是Socket使用libuv的IOCP提高并发率
 ** 使用BufferPool预分配缓冲，以实现收发消息的零拷贝
 ** 进程间通信使用lock-free的消息队列
* 一切看起来都很美好，但是真正开始考虑实现的时候，发现大量的问题接踵而至:
 ** libuv确实是个简单易用的库，不过它的回调机制和C++面向对象机制格格不入，因为类成员函数无法作为回调函数，因此想要做优雅的对象封装实在难以实现
 ** 预分配缓冲池是个不错的想法，但是同样碰到了锁的问题，如果缓冲池无法做到lock-free，那么多个线程很可能对缓冲池操作发起竞争，这样的代价可能比直接用new申请更糟糕。于是我不得不重新考虑使用缓冲池的方案了。
 ** 大部分的lock-free队列实现都使用了C++ 11的原子操作，但是VS2008是无法支持的，因此不得不放弃这个想法
* 所以现在的计划就是先用简单的new/delete方式来分配缓冲，搭配IOCP,看看能做到什么程度
* 目前已经能做到和客户端通信了，简单的使用回显已经OK

h3. 2014-6-19

* 找到一个折中的方案，单线程内使用环形缓冲，这样不用频繁的为消息申请内存，跨线程通信memcpy一次，这样就无需考虑lock-free的问题。
* 从网上找到一个环形缓冲的实现，是一个貌似挺有名还出过书的老外写的，稍微瞄了几眼代码，跑了一次他的测试用例，觉得没啥问题就拿来用了，结果就悲剧了。at()里面出现一处低级错误(size->index)。看来即使老外的LIB也不能全信啊。让我想起了HeartBleed。
* 测试过程中发现一个内存泄露，uv_listen的时候，libuv内部会申请一块内存。但是uv_close的时候，这块内存空间并不会立即被释放，libuv会事件循环发送一个endgame,要等到下个循环处理endgame时，才会被释放掉。但是我用的是公司的线程实现，一旦closeThread线程就被终止了，根本没有机会做清理。因此我不得不对线程循环做了一些改造。
* 改造完成后又发现如果还有客户端连接在服务器上，服务器不会关闭，即使已经将服务端的SOCKET用uv_close关闭了，原因服务器上的对端SOCKET没有关闭，uv_run认为还有事件等待处理，因此不会返回0。